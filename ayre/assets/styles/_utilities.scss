/* Media */

@mixin media($min: null, $max: null) {
	@if $min == high-dpi {
		@media screen and (-webkit-min-device-pixel-ratio: 2), screen and (min-resolution: 192dpi) { @content; }
	} @else if $min == print {
		@media print { @content; }
	} @else {
		@if $min != null and $max != null {
			@media screen and (min-width: $min) and (max-width: $max) { @content; }
		} @else if $min != null {
			@media screen and (min-width: $min) { @content; }
		} @else if $max != null {
			@media screen and (max-width: $max) { @content; }
		} @else {
			@media screen { @content; }
		}
	}
}

/* Image & Sprite */

@mixin image-raster($name, $extension: png) {
	$file-1x: '1x/' + $name + '.' + $extension;
	$file-2x: '2x/' + $name + '.' + $extension;
	background-image: image-url($file-1x);
	@include media(high-dpi) {
		background-image: image-url($file-2x);
		background-size: (image-width($file-2x) / 2) (image-height($file-2x) / 2);
	}
}
@mixin image-vector($name) {
	$file: $name + '.svg';
	background-image: inline-image($file);
	.old-ie & {
		@include image-raster($name);
	}
}

$sprites-1x: sprite-map('1x/*.png', $layout: smart);
$sprites-2x: sprite-map('2x/*.png', $layout: smart);
%sprite {
	display: inline-block;
	background-repeat: no-repeat;
	@include hide-text;
}
@mixin sprite-raster($name) {
	@extend %sprite;
	background-image: sprite-url($sprites-1x);
	background-position: sprite-position($sprites-1x, $name);
	width: image-width(sprite-file($sprites-1x, $name));
	height: image-height(sprite-file($sprites-1x, $name));
	@include media(high-dpi) {
		background-image: sprite-url($sprites-2x);
		background-position: round(nth(sprite-position($sprites-2x, $name), 1) / 2) round(nth(sprite-position($sprites-2x, $name), 2) / 2);
		background-size: (image-width(sprite-path($sprites-2x)) / 2) (image-height(sprite-path($sprites-2x)) / 2);
		width: image-width(sprite-file($sprites-2x, $name)) / 2;
		height: image-height(sprite-file($sprites-2x, $name)) / 2;
	}
}
@mixin sprite-vector($name) {
	$file: $name + '.svg';
	$file-1x: '1x/' + $name + '.png';
	@extend %sprite;
	background-image: inline-image($file);
	width: image-width($file-1x);
	height: image-height($file-1x);
	.old-ie & {
		@include sprite-raster($name);
	}
}

@mixin attach($position: before, $margin: 0.5em, $align: middle) {
	#{'&:' + $position} {
		content: '';
		@content;
		vertical-align: $align;
		@if $position == before {
			margin-right: $margin;
		} @else {
			margin-left: $margin;
		}
	}
}

/* Flush */

@mixin flush { 
	> *:first-child	{
		margin-top: 0 !important;
	}
}
@mixin flush-next { 
	&:first-child + * {
		margin-top: 0 !important;
	}
}

/* Text */

@mixin font-size($value: 0) {
	@if (unitless($value)) {
		font-size: pow($font-scale, strip-units($value)) * $font-size;
		font-size: pow($font-scale, strip-units($value)) * 1rem;
	} @else {
		font-size: $value;
		font-size: ($value / $font-size) * 1rem;
	}
}
@mixin link-color($color) {
	@include link-colors(
		$color,
		$color,
		$color,
		$color,
		$color
	);
}

/* Inline Block */

@mixin inline-blocks($selector, $x: null, $y: null, $font-size: 0) {
	@if ($x) {
		margin-left: -($x * 0.5);
		margin-right: -($x * 0.5);
	}
	@if ($y) {
		margin-bottom: -$y;	
	}
	@include collapse-whitespace($selector, $font-size);
	#{$selector} {
		@if ($x) {
			padding-left: ($x * 0.5);
			padding-right: ($x * 0.5);
		}
		@if ($y) {
			margin-bottom: $y;
		}
		@include inline-block(top);
	}
}
@mixin inline-blocks-justify($selector, $x: null, $y: null, $font-size: 0) {
	text-align: justify;
	@include inline-blocks($selector, $x, $y, $font-size);
	&:after {
		content: '';
		width: 100%;
		@include inline-block(top);
	}
	#{$selector} {
		text-align: left;
	}
}

@mixin vertically-center($selector, $font-size: 0) {
	@include collapse-whitespace($selector, $font-size);
	&:before {
		content: '';
		height: 100%;
		@include inline-block(middle);
	}
	#{$selector} {
		width: 100%;
		@include inline-block(middle);
	}
}

@mixin collapse-whitespace($selector, $font-size: 0) {
	font-size: 0;
	#{$selector} {
		@include font-size($font-size);
	}
}

/* Ratio */

.ratio {
	@include box-sizing(content-box);
}
@mixin ratio($width, $height) {
	@extend .ratio;
	padding-top: ($height / $width) * 100%;
}
@mixin ratio-fluid($small-width, $small-height, $large-width, $large-height) {
	@extend .ratio;
	$slope: ($large-height - $small-height) / ($large-width - $small-width);
	padding-top: $slope * 100%;
	height: $small-height - $small-width * $slope;
}

/* Placeholder */

@mixin placeholder {
	&::-webkit-input-placeholder { @content }
	&:-moz-placeholder           { @content }
	&::-moz-placeholder          { @content }
	&:-ms-input-placeholder      { @content }
}

/* Arrow */

@mixin arrow($size, $offset: 0) {
	position: relative;
	&:after {
		content: '';
		position: absolute;
		top: $offset * -1;
		right: $offset * -1;
		border: $size * 0.5 solid;
		border-color: transparent white transparent transparent;
	}
}

/* Functions */

@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}